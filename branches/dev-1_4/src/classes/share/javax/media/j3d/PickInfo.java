/*
 * $RCSfile$
 *
 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * $Revision$
 * $Date$
 * $State$
 */

package javax.media.j3d;

import javax.vecmath.*;

/**
 * The PickInfo object contains the computed information about a pick hit.  
 * The detailed information about each intersection of the PickShape 
 * with the picked Node can be inquired.  The PickInfo object is constructed with
 * basic information and more detailed information can be generated by setting the
 * appropriate mask to the flag argument in the pick methods of BranchGroup and 
 * Locale.
 * <p>
 *
 * @see Locale
 * @see BranchGroup 
 *
 * @since Java 3D 1.4
 */


public class PickInfo extends Object {
    
    /* The SceneGraphPath of the intersected pickable item */
    private SceneGraphPath sgp;

    /* The intersected pickable node object */
    private  Node node;
    
    /* A copy of LocalToVworld transform of the pickable node */
    private Transform3D l2vw;

    /* The closest intersection point */
    private Point3d closestIntersectionPoint;
 
    /* Distance between start point of pickShape and closest intersection point */
    private double  closestDistance;

    /* An array to store intersection results */
    private IntersectionInfo[] intersectionInfos;


    /**
     * Specifies a Pick using the bounds of the pickable nodes.
     */
    public static final int PICK_BOUNDS = 0x1;
    
    /**
     * Specifies a Pick using the geometry of the pickable nodes.
     */
    public static final int PICK_GEOMETRY = 0x2;
    
    /**
   * Specifies that this PickInfo returns the computed SceneGraphPath object.
   */
    static final int SCENEGRAPHPATH  = 0x04;
    
    /**
     * Specifies that this PickInfo returns the computed intersected Node object.
     */
    static final int NODE = 0x08;
    
    /**
     * Specifies that this PickInfo returns the computed local to vworld transform.
     */
    public static final int LOCAL_TO_VWORLD = 0x08;
    
    /**
     * Specifies that this PickInfo returns the closest intersection point.
     */
    public static final int CLOSEST_INTERSECTION_POINT = 0x10;

    /**
     * Specifies that this PickInfo returns the closest intersection distance.
     */
    public static final int CLOSEST_DISTANCE = 0x20;

    /**
     * Specifies that this PickInfo returns only the closest intersection 
     * geometry information.
     */
    public static final int CLOSEST_GEOM_INFO = 0x40;

    /**
     * Specifies that this PickInfo returns all the closest intersection 
     * geometry informations.
     */
    public static final int ALL_GEOM_INFO = 0x80;


    /** PickInfo Constructor */
    PickInfo() {

    }
    

    /**
     * Retrieves the reference to the SceneGraphPath in this PickInfo object.
     * @return the SceneGraphPath object, or null if  flag is not set with SCENEGRAPHPATH.
     * @see Locale
     * @see BranchGroup
     */
    public SceneGraphPath getSceneGraphPath() {

	return sgp;

    }
    

    /**
     * Retrieves the reference to the picked node, either a Shape3D or a Morph, in this PickInfo object.
     * @return the picked leaf node object, or null if  flag is not set with NODE.
     * @see Locale
     * @see BranchGroup
     */
    public Node getNode() {

	return node;
    }

    /**
     * Retrieves the reference to the LocalToVworld transform of the picked node in this PickInfo object.
     * @return the local to vworld transform, or null if  flag is not set with LOCAL_TO_VWORLD.
     * @see Locale
     * @see BranchGroup
     */
    public Transform3D getLocalToVWorld() {
	
	return l2vw;

    }
	
    /**
     * Retrieves the reference to the closest intersection point in this PickInfo object.
     * @return the closest intersection point, or null if  flag is not set with CLOSEST_INTERSECTION_POINT.
     * @see Locale
     * @see BranchGroup
     */
    public Point3d getClosestIntersectionPoint() {

	return closestIntersectionPoint;
    
    }

    /**
     * Retrieves the distance between the start point of the pickShape and the closest intersection point.
     * @return double, or null if  flag is not set with CLOSEST_INTERSECTION_POINT.
     * @see Locale
     * @see BranchGroup
     */
    public double getClosestDistance() {

	return closestDistance;
    }

    /**
     * Retrieves the reference to the array of intersection results in this PickInfo object.
     * @return an array of  IntersectionInfo, with length 1, if  flag is to set  CLOSEST_GEOM_INFO,
     * or an array of IntersectionInfo contains all intersections of the picked node in sorted order.
     * @exception IllegalStateException if  both CLOSEST_GEOM_INFO and ALL_GEOM_INFO are set.
     * @see Locale
     * @see BranchGroup
     */
    public IntersectionInfo[] getIntersectionInfos() {

	return intersectionInfos;	
    }
    
    /**
     * The IntersectionInfo object holds extra information about an intersection 
     * of a PickShape with a Node as part of a PickInfo. Information such as 
     * the intersected geometry, the intersected point, and the vertex indices 
     * can be inquired.  
     * The local coordinates, normal, color and texture coordiantes of at the
     * intersection can be computed, if they are present and readable, using the 
     * interpolation weights and vertex indices.
     * <p>
     * If the Shape3D being picked has multiple geometry arrays, the possible arrays
     * of IntersectionInfo are stored in the PickInfo and referred to by a geometry 
     * index. If the picked geometry is of type, Text3D or CompressGeometry, 
     * getVertexIndices and getWeights are invalid. If the picked Node is an Morph 
     * object, the geometry used in pick computation is alway at index 0.
     * <p>
     *
     * @since Java 3D 1.4
     */				    
    
    public class IntersectionInfo extends Object {
	
	/* The index to the intersected geometry in the pickable node */
	private int geomIndex;

        /* The reference to the intersected geometry in the pickable object */
	private Geometry geom;

	/* The intersection point */
	private Point3d intersectionPoint;

	/* Distance between start point of pickShape and intersection point */
	private double  distance;

	/* The vertex indices of the intersected primitive in the geometry */   
	private int[] vertexIndices;

	/* The interpolation weights for each of the verticies of the primitive */
	private float[] weights;     

	/** IntersectionInfo Constructor */
	IntersectionInfo() {

	}

	/**
	 * Retrieves the index to the intersected geometry in the picked node, either a Shape3D or Morph.
	 * @return the index of the intersected geometry in the pickable node.
	 */
	public int getGeometryIndex() {
	    return geomIndex;
	}

	/**
	 * Retrieves the reference to the intersected geometry in the picked object, either a Shape3D or Morph.
	 * @return the intersected geometry in the pickable node.
	 */
	public Geometry getGeometry() {
	    return geom;
	}

	/**
	 * Retrieves the reference to the intersection point in the pickable node.
	 * @return the intersected point in the pickable node.
	 */
	public Point3d getIntersectionPoint() {
	    return intersectionPoint;
	}

	/**
	 * Retrieves the distance between the start point of the pickShape and the 
	 * intersection point.
	 * @return distance between the start point of the pickShape and the 
	 * intersection point.
	 */
	public double getDistance() {
	    
	    return distance;
	}
	/**
	 * Retrieves the vertex indices of the intersected primitive in the geometry.
	 * @return the vertex indices of the intersected primitive.
	 */
	public int[] getVertexIndices() {
	    return vertexIndices;
	}

	/**
	 * Retrieves the interpolation weights for each of the verticies of the  intersected primitive.
	 * Quad needs to be co-planar.
	 * @return the interpolation weights for each of the verticies.
	 */
	public float[] getWeights() {
	    return weights;
	}

    }
}


