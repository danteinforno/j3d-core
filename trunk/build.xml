<?xml version="1.0"?>

<!--
/*
 * $RCSfile$
 *
 * Copyright (c) 2004 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * $Revision$
 * $Date$
 * $State$
 */
 -->

<project name="Java 3D" default="jar-opt" basedir=".">

  <!-- ************************* -->
  <!-- Build Specific properties -->

  <!-- Version number of build -->
  <property name="version_base" value="1.3.2"/>

  <!-- Build number, eg pre6, build6 -->
  <property name="version_build" value="pre7"/>

  <!-- End of Build Specific properties -->
  <!-- ******************************** -->

  <!-- Set global properties for this build -->
  <property name="vecmath_home" location="../vecmath"/>
  <property name="core_utils_home" location="../j3d-core-utils"/>

  <property name="src"     location="src"/>
  <property name="vecmath_src" location="${vecmath_home}/src"/>
  <property name="core_utils_src" location="${core_utils_home}/src"/>
  <property name="build-tools" location="build-tools"/>
  <property name="build"   location="build"/>
  <property name="dist"    location="dist"/>
  <property name="build.comp" value="gcc"/>
  <property name="build.rend" value="ogl"/>

  <target name="echo" depends="setupPlatform">	
    <echo message="user.name       = ${user.name}"/>
    <echo message="user.home       = ${user.home}"/>
    <echo message="java.home       = ${java.home}"/>
    <echo message="ant.home        = ${ant.home}"/>
    <echo message="O/S arch        = ${os.arch}"/>
    <echo message="O/S name        = ${os.name}"/>	
    <echo message="build.rend      = ${build.rend}"/>
    <echo message="build.comp      = ${build.comp}"/>
    <echo message="vecmath_home    = ${vecmath_home}"/>
    <echo message="core_utils_home = ${core_utils_home}"/>
    <echo message="ostype          = ${ostype}"/>
    <echo message="platform        = ${platform}"/>
    <echo message="version         = ${version}"/>
    <echo message="daily_build     = ${daily_build}"/>
    <echo message="dev_phase       = ${dev_phase}"/>
  </target>

  <target name="setupSolaris" if="isSolarisOnSparc">	
    <property name="ostype" value="solaris"/>
    <property name="platform" value="solaris-sparc-${build.comp}"/>
  </target>

  <target name="setupLinux" if="isLinuxOnX86">	
    <property name="ostype" value="linux"/>
    <property name="platform" value="linux-i586"/>
  </target>

  <!-- win32 should be rename as windows -->
  <target name="setupWindows" if="isWindowsOnX86">	
    <property name="ostype" value="win32"/>
    <property name="platform" value="windows-i586-${build.comp}"/>
  </target>

  <target name="setupDaily" unless="build.stable">
    <echo message="setupDaily"/>
    <property name="daily_build" value="true"/>
    <property name="version" value="${version_base}_${version_build}_${buildtime}"/>
  </target>

  <target name="setupStable" if="build.stable">
    <echo message="setupStable"/>
    <property name="daily_build" value="false"/>
    <property name="version" value="${version_base}_${version_build}"/>
  </target>

  <target name="setupProduction" if="build.production">
    <echo message="setupProduction"/>
    <property name="daily_build" value="false"/>
    <property name="version" value="${version_base}"/>
    <property name="dev_phase" value="false"/>
  </target>

  <target name="setupDevPhase" unless="build.production" depends="setupDaily,setupStable">
    <echo message="setupDevPhase"/>
    <property name="dev_phase" value="true"/>
  </target>

  <target name="setupPlatform"
       depends="init, setupProduction, setupDevPhase ,setupSolaris, setupLinux, setupWindows">
    <property name="build-debug-gen" location="${build}/${platform}/debug/gen"/>
    <property name="build-opt-gen" location="${build}/${platform}/opt/gen"/>
    <property name="docname" value="java3d-${version}-doc"/>
  </target>


  <target name="init">
    <!-- Create the time stamp -->
    <tstamp>
        <format property="buildtime_verbose" pattern="dd MMM yyyy HH:mm:ss z"/>
        <format property="buildtime" pattern="yyMMddHHmm"/>
    </tstamp>
  
    <echo message="buildtime = ${buildtime_verbose}"/>

    <!-- Create the base build directory -->
    <mkdir dir="${build}"/>

    <!-- ========== determine platform ========== -->
    <condition property="isWindowsOnX86">
	<os family="windows" arch="x86"/>
    </condition> 

    <condition property="isLinuxOnX86">
        <os name="linux" arch="i386"/>
    </condition>

    <condition property="isSolarisOnSparc">
        <os name="SunOS" arch="sparc"/>
    </condition>   
  </target>

  <target name="compile-debug" depends="setupPlatform">
	<ant dir="src/classes" target="compile-debug"/>
	<ant dir="src/native" target="compile-debug"/>
  </target>

  <target name="compile-opt" depends="setupPlatform">
	<ant dir="src/classes" target="compile-opt"/>
	<ant dir="src/native" target="compile-opt"/>
  </target>

  <target name="compile" depends="compile-debug,compile-opt" />

  <target name="jar-debug" depends="compile-debug">
	<ant dir="src/classes" target="jar-debug"/>
  </target>

  <target name="jar-opt" depends="compile-opt">
	<ant dir="src/classes" target="jar-opt"/>
  </target>

  <target name="jar" depends="jar-debug,jar-opt" />

  <target name="docs-jcp" depends="setupPlatform">
	<ant dir="src/classes" target="docs-jcp"/>
  </target>

  <target name="docs-public" depends="setupPlatform" unless="nojavadoc">
	<ant dir="src/classes" target="docs-public"/>
  </target>

  <target name="docs-private" depends="setupPlatform">
	<ant dir="src/classes" target="docs-private"/>
  </target>

  <target name="docs" depends="setupPlatform">
	<ant dir="src/classes" target="docs"/>
  </target>

  <target name="dist" depends="jar-opt,docs-public">
	<ant dir="src/classes" target="dist"/>
	<ant dir="src/native" target="dist"/>
  </target>

  <target name="all" depends="jar-debug,dist,docs-jcp,docs-private"/>

  <target name="rpm" description="Build rpm package" depends="dist">
      <mkdir dir="${build}/rpm"/>
      <mkdir dir="${build}/rpm/SPECS"/>
      <mkdir dir="${build}/rpm/SOURCES"/>
      <mkdir dir="${build}/rpm/BUILD"/>
      <mkdir dir="${build}/rpm/RPMS"/>

      <copy file="build-tools/java3d-rpm.spec" 
            todir="${build}/rpm/SPECS"
            overwrite="true">
          <filterset>
              <filter token="VERSION" value="${version}"/>
          </filterset>
      </copy>

      <tar destfile="${build}/rpm/SOURCES/java3d-${version}.tar.gz"
           compression="gzip">
          <tarfileset dir="${dist}/linux-i586"
                      includes="lib/**"
          />
          <tarfileset dir="release-info"
                      includes="BINARY-CODE-LICENSE.txt"
          />
          <tarfileset dir="."
                      includes="COPYRIGHT.txt README-FIRST.txt"
          />
      </tar>

      <rpm specFile="java3d-rpm.spec"
           topDir="${build}/rpm"/>

      <copy file="${build}/rpm/RPMS/i586/java3d-${version}-1.i586.rpm" todir="dist/linux-i586"/>
  </target>

  <target name="clean-dist">
    <!-- Delete the ${dist} directory tree  -->
    <delete dir="${dist}"/>
  </target>

  <target name="clean">
    <!-- Delete the ${build}, and ${dist} directory trees  -->
    <delete dir="${build}"/>	
    <delete dir="${dist}"/>
  </target>

  <description>
The following ant targets are available ("jar-opt" is the default):

      all           - execute targets jar-debug and dist.

      clean         - removes WS/build/ and WS/dist/

      clean-dist    - removes WS/dist.

      compile       - execute targets compile-debug and compile-opt.
 
      compile-debug - builds all classes and native layer in WS/src into 
                      class files under WS/build/${platform}/debug/classes/ and
                      native files under WS/build/${platform}/debug/native/

      compile-opt   - builds all classes and native layer in WS/src into 
                      class files under WS/build/${platform}/opt/classes/ and
                      native files under WS/build/${platform}/opt/native/

      dist          - creates the distribution jar, native library and javadoc
                      under WS/dist/${platform}.

      docs          - builds all classes in WS/src into javadoc under 
                      WS/build/javadocs.

      docs-jcp      - builds JCP docs of all classes in WS/src into javadoc under 
                      WS/build/javadocs/docs-jcp.

      docs-private  - builds private docs of all classes in WS/src into javadoc under 
                      WS/build/javadocs/docs-private.

      docs-public   - builds public docs of all classes in WS/src into javadoc under 
                      WS/build/javadocs/docs-public.

      echo          - echo some useful information, such as user.home,
                      ant.home, java.home and platform.

      jar           - execute targets jar-debug and jar-opt.

      jar-debug     - creates WS/build/${platform}/debug/lib for all jar
                      files and libraries from class and native code files under 
                      WS/build/${platform}/debug/classes and 
                      WS/build/${platform}/debug/native.

      jar-opt       - creates WS/build/${platform}/opt/lib for all jar
                      files and libraries from class and native code files under 
                      WS/build/${platform}/opt/classes and 
                      WS/build/${platform}/opt/native.

      rpm           - creates a i586 rpm for installation in /usr/java/jdk1.5.0
                      the rpm is placed in dist/rpm
  </description>
</project>
